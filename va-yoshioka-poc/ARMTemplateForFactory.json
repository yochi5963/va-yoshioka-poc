{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "データ ファクトリ名",
			"defaultValue": "va-yoshioka-poc"
		},
		"lnk_stock_sql_connectionString": {
			"type": "secureString",
			"metadata": "'lnk_stock_sql' の 'connectionString' のセキュリティで保護された文字列"
		},
		"test01_link_blob_connectionString": {
			"type": "secureString",
			"metadata": "'test01_link_blob' の 'connectionString' のセキュリティで保護された文字列"
		},
		"test01_link_files_connectionString": {
			"type": "secureString",
			"metadata": "'test01_link_files' の 'connectionString' のセキュリティで保護された文字列"
		},
		"test01_link_sql_connectionString": {
			"type": "secureString",
			"metadata": "'test01_link_sql' の 'connectionString' のセキュリティで保護された文字列"
		},
		"lnk_stock_blob_properties_typeProperties_serviceEndpoint": {
			"type": "string",
			"defaultValue": "https://vacommonblob.blob.core.windows.net"
		},
		"trg_B2D_BlobTrigger_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/924431d4-c274-4ce3-963e-06e1bb43eede/resourceGroups/V-YOSHIOKA-POC/providers/Microsoft.Storage/storageAccounts/vayoshiokablob"
		},
		"trg_ecbeing_create_target_list_1_properties_pip_ecbeing_create_target_list_1_parameters_in_error_mode": {
			"type": "string",
			"defaultValue": "1"
		},
		"trigger1_properties_CopyFilesfromMultipleContainers_parameters_SourceFileFolder": {
			"type": "string",
			"defaultValue": "aaa"
		},
		"trigger1_properties_CopyFilesfromMultipleContainers_parameters_SourceFileDirectory": {
			"type": "string",
			"defaultValue": "bbbb"
		},
		"trigger1_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileFolder": {
			"type": "string",
			"defaultValue": "ccc"
		},
		"trigger1_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileDirectory": {
			"type": "string",
			"defaultValue": "dddd"
		},
		"trigger1_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/924431d4-c274-4ce3-963e-06e1bb43eede/resourceGroups/V-YOSHIOKA-POC/providers/Microsoft.Storage/storageAccounts/vayoshiokablob"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_SelectCount')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select_count",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from zz_yoshioka22;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-27T04:43:16Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_SelectError')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from zz_yoshiokaHOGE",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "select_error",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "select",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select 'せれくとえらー発生'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T06:45:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_SelectFix')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select_fix",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select 'hellow hoge';",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T06:45:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_SelectParameter')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "select * from zz_yoshioka where id = @{pipeline().parameters.where_name}",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"where_name": {
						"type": "string"
					}
				},
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T06:45:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_SelectRecord')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "select",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select * from zz_yoshioka",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-07T06:45:06Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_B2D_BlobTrigger')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "11_in",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-03T09:06:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/11_in')]",
				"[concat(variables('factoryId'), '/datasets/11_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_B2D_simple')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "11_in",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data1_zip",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copy data1",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "11_in_zip",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:39:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/11_in')]",
				"[concat(variables('factoryId'), '/datasets/11_out')]",
				"[concat(variables('factoryId'), '/datasets/11_in_zip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_B2D_zip_dir')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1TAKABAA",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "11_in_zip_dir",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-03T09:06:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/11_in_zip_dir')]",
				"[concat(variables('factoryId'), '/datasets/11_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_F2D')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data3",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "12_in_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-12T00:22:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/12_in_csv')]",
				"[concat(variables('factoryId'), '/datasets/11_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_F2Dcopy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data41",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureFileStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "FirstName",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "LastName",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "12_in_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "11_out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"annotations": [],
				"lastPublishTime": "2021-02-12T00:22:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/12_in_csv')]",
				"[concat(variables('factoryId'), '/datasets/11_out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dummy_pipline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Wait 3s",
						"type": "Wait",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 3
						}
					}
				],
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-19T07:21:43Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist-zz_goods_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "goods_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "price",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_goods",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_goods",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-03T08:46:03Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_goods')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_goods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist_zz_goods')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "goods_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "price",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_goods",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_goods",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:39:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_goods')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_goods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist_zz_odtail')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "odetail_id",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "order_id",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "goods_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "qty",
											"type": "Int32",
											"physicalType": "int"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_odtail",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_odtail",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:39:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_odtail')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_odtail')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist_zz_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "order_id",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:39:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_order')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_order')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist_zz_shop')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink"
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "name",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_shop",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_shop",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:39:21Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_shop')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_shop')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ist_zz_stock_work')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "book_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 12
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "stock_qty",
											"type": "Decimal",
											"physicalType": "decimal",
											"scale": 4,
											"precision": 12
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "flg",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "planogram_flg",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "sales_flg",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "data_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_stock_work",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_stock_work",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"lastPublishTime": "2021-02-10T07:02:10Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_stock_work')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_stock_work')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/job_odbms_get_arrival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "バッチ実行結果を参照し自JOBが当日正常終了していなければ処理続行",
				"activities": [
					{
						"name": "GetJobStatusGM",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_arriv_gm_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGM",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGM').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGM",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_arriv_gm_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGM",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_arrival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GM",
											"in_exec_na": "odbms_arriv_gm_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusGR",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_arriv_gr_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGR",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGR').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGR",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_arriv_gr_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGR",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_arrival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GR",
											"in_exec_na": "odbms_arriv_gr_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusMD",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_arriv_md_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusMD",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusMD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusMD').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineMD",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_arriv_md_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineMD",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_arrival",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "MD",
											"in_exec_na": "odbms_arriv_md_in"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pip_odbms_get_arrival')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/job_odbms_get_mininfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "バッチ実行結果を参照し自JOBが当日正常終了していなければ処理続行",
				"activities": [
					{
						"name": "GetJobStatusGM",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_mini_gm_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGM",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGM').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGM",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_mini_gm_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGM",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_minInfo",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GM",
											"in_exec_na": "odbms_mini_gm_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusGR",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_mini_gr_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGR",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGR').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGR",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_mini_gr_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGR",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_minInfo",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GR",
											"in_exec_na": "odbms_mini_gr_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusMD",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_mini_md_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusMD",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusMD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusMD').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineMD",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_mini_md_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineMD",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_minInfo",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "MD",
											"in_exec_na": "odbms_mini_md_in"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pip_odbms_get_minInfo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/job_odbms_get_stock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "バッチ実行結果を参照し自JOBが当日正常終了していなければ処理続行",
				"activities": [
					{
						"name": "GetJobStatusGM",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_stock_gm_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGM",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGM').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGM",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_stock_gm_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGM",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_stock",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GM",
											"in_exec_na": "odbms_stock_gm_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusGR",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGM",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_stock_gr_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusGR",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusGR').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineGR",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_stock_gr_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineGR",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_stock",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "GR",
											"in_exec_na": "odbms_stock_gr_in"
										}
									}
								}
							]
						}
					},
					{
						"name": "GetJobStatusMD",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "CheckJobStatusGR",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_stock_md_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatusMD",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatusMD",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatusMD').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "CancelPipelineMD",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "odbms_stock_md_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、パイプライン処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "NextPipelineMD",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_odbms_get_stock",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											},
											"in_target": "MD",
											"in_exec_na": "odbms_stock_md_in"
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pip_odbms_get_stock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lote_move_daily')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "日別ローテーションフォルダへ移動",
				"activities": [
					{
						"name": "Copy Daily",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "upload_folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "daily_folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Dummy Call Stored",
						"type": "Wait",
						"dependsOn": [
							{
								"activity": "Copy Daily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"waitTimeInSeconds": 1
						}
					},
					{
						"name": "Delete Upload",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "Dummy Call Stored",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Dummy Call Pipeline",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "upload_folder",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					},
					{
						"name": "Dummy Call Pipeline",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Copy Daily",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "dummy_pipline",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-19T07:21:43Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/upload_folder')]",
				"[concat(variables('factoryId'), '/datasets/daily_folder')]",
				"[concat(variables('factoryId'), '/pipelines/dummy_pipline')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lote_upload')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data1",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "sample_folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "upload_folder",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-19T05:21:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/sample_folder')]",
				"[concat(variables('factoryId'), '/datasets/upload_folder')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mge_zz_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "CopyTemp",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table zz_order_tmp;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "order_id",
											"type": "Int64",
											"physicalType": "bigint"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "ot_zz_order_tmp",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MergeTemp",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyTemp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "MERGE zz_order AS target\nUSING zz_order_tmp AS source ON (target.order_id = source.order_id)\nWHEN MATCHED THEN\n    UPDATE SET shop_cd = source.shop_cd,\n                total = source.total,\n                updt = CURRENT_TIMESTAMP\nWHEN NOT MATCHED THEN\n    INSERT (order_id, shop_cd, total, updt)\n    VALUES (source.order_id, source.shop_cd, source.total, CURRENT_TIMESTAMP);\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "22_BmD"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T09:47:02Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_order')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_order_tmp')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/mpi_zz_order')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "mfl_zz_order",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "UnzipDataFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "mfl_zz_order",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"source1": {},
									"sink1": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "test01-runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "UnzipDataFile",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "in_zz_order",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "in_zz_order_unzip",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"folder": {
					"name": "22_BmD"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-18T07:45:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/mfl_zz_order')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/test01-runtime')]",
				"[concat(variables('factoryId'), '/datasets/in_zz_order')]",
				"[concat(variables('factoryId'), '/datasets/in_zz_order_unzip')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_company_mast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table company_mast;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "bic_company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "company_na",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "sort_jun",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_company_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_company_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_company_mast')]",
				"[concat(variables('factoryId'), '/datasets/snk_company_mast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_contain_store_dept_mast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table contain_store_dept_mast;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "retail_store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "sub_category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "link_pattern",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "containing_store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_contain_store_dept_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_contain_store_dept_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_contain_store_dept_mast')]",
				"[concat(variables('factoryId'), '/datasets/snk_contain_store_dept_mast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_dept_term')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table dept_term;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "varchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "judge_term",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_dept_term",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_dept_term",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_dept_term')]",
				"[concat(variables('factoryId'), '/datasets/snk_dept_term')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ecbeing_create_target_list_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "バッチ実行結果を参照し自JOBが当日正常終了していなければ処理続行",
				"activities": [
					{
						"name": "GetJobStatus",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND ecbeing_goods_in_rslt_cd  = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatus",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@not(\n  equals(\n    activity('GetJobStatus').output.firstRow.cnt,\n    1\n  )\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "cancel_pipeline",
									"description": "処理終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "ecbeing_goods_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "実施済であるため、ストアド処理を起動しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "next_pipeline",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_ecbeing_create_target_list_2",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pip_ecbeing_create_target_list_2')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ecbeing_create_target_list_2')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "バッチ実行結果を参照し先行JOBが当日正常終了していれば処理続行",
				"activities": [
					{
						"name": "GetJobStatus",
						"description": "本日のバッチ実行結果を参照",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT COUNT(*) AS cnt\n  FROM batch_exec_rslt_info beri\n WHERE exec_dt = dbo.get_current_exec_dt()\n   AND odbms_stock_md_in_rslt_cd = '1'\n   AND odbms_stock_gr_in_rslt_cd = '1'\n   AND odbms_stock_gm_in_rslt_cd = '1'\n   AND odbms_arriv_md_in_rslt_cd = '1'\n   AND odbms_arriv_gr_in_rslt_cd = '1'\n   AND odbms_arriv_gm_in_rslt_cd = '1'\n   AND odbms_brakeset_in_rslt_cd = '1'",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CheckJobStatus",
						"description": "本日のバッチ実行結果をチェック",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "GetJobStatus",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(\n  activity('GetJobStatus').output.firstRow.cnt,\n  1\n)",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "marge_error_exec_rslt_info_adf",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": "ecbeing_goods_in_rslt",
												"type": "String"
											},
											"vc_log_text": {
												"value": "他のバッチ処理がまだ完了していません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "next_pipeline",
									"description": "後続処理呼出",
									"type": "ExecutePipeline",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"pipeline": {
											"referenceName": "pip_ecbeing_create_target_list_3",
											"type": "PipelineReference"
										},
										"waitOnCompletion": true,
										"parameters": {
											"in_error_mode": {
												"value": "@pipeline().parameters.in_error_mode",
												"type": "Expression"
											}
										}
									}
								}
							]
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/pipelines/pip_ecbeing_create_target_list_3')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ecbeing_create_target_list_3')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CSVファイルをDBに読み込みストアド呼び出し",
				"activities": [
					{
						"name": "ImportError",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": "ecbeing_goods_in",
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "next_dummy",
						"description": "平田ストアド",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "02:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": "ecbeing_goods_in",
									"type": "String"
								},
								"vc_log_text": {
									"value": {
										"value": "@concat('次処理呼出3 para=', pipeline().parameters.in_error_mode)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE ecbeing_goods_info;",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "shop_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "sub_category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "sales_promotion_cd",
											"type": "String",
											"physicalType": "nchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "disp_status_cd",
											"type": "String",
											"physicalType": "nchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_ecbeing_create_target_list",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_ecbeing_goods_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Complete",
						"description": "正常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "next_dummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": "ecbeing_goods_in",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_ecbeing_create_target_list')]",
				"[concat(variables('factoryId'), '/datasets/snk_ecbeing_goods_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ecbeing_create_target_list_3_BULK')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "CSVファイルを新規の一時テーブルに読み込みストアド呼び出し",
				"activities": [
					{
						"name": "ExistsFile",
						"description": "CSVファイルの到着待ち",
						"type": "Validation",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_ecbeing_create_target_list",
								"type": "DatasetReference",
								"parameters": {}
							},
							"timeout": "00:01:00",
							"sleep": 10
						}
					},
					{
						"name": "marge_error_exec_rslt_info_adf",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExistsFile",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": "ecbeing_goods_in_rslt",
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "next_dummy",
						"description": "処理終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DeleteCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_normal_exec_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": "ecbeing_goods_in_rslt",
									"type": "String"
								},
								"vc_log_text": {
									"value": {
										"value": "@concat('次処理呼出3 para=', pipeline().parameters.in_error_mode)",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "UnzipCsv",
						"description": "Zipファイルを解凍",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ExistsFile",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_ecbeing_create_target_list",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "src_ecbeing_create_target_list_unzip",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "BulkCsv2Tmp",
						"description": "CSVファイルを一時テーブルにBulkInsert",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "UnzipCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "TRUNCATE TABLE ecbeing_goods_tmp;\nBULK INSERT ecbeing_goods_tmp\nFROM 'appdata/ftpdata/ecbeing/in/goods/ecbeing_goods.csv'\nWITH (\n    DATA_SOURCE            = 'MyAzureBlobStorage',\n    FORMATFILE_DATA_SOURCE = 'MyAzureBlobStorage',\n    FORMATFILE             = 'appdata/format/ecbeing_goods.xml');  \nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DeleteCsv",
						"description": "CSVファイル削除",
						"type": "Delete",
						"dependsOn": [
							{
								"activity": "BulkCsv2Tmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "src_ecbeing_create_target_list_unzip",
								"type": "DatasetReference",
								"parameters": {}
							},
							"enableLogging": false,
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							}
						}
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_ecbeing_create_target_list')]",
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_ecbeing_create_target_list_unzip')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_exclude_goods_info')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table exclude_goods_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "store_nm",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "godds_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "remarks",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "sub_category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_exclude_goods_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_exclude_goods_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_exclude_goods_info')]",
				"[concat(variables('factoryId'), '/datasets/snk_exclude_goods_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_intac_judge_info')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table intac_judge_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "dept_group_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "dept_group_na",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "dept_na",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "sub_category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "env_id",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "disp_logic",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_intac_judge_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_intac_judge_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_intac_judge_info')]",
				"[concat(variables('factoryId'), '/datasets/snk_intac_judge_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_intactix_get_janInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": "planogram_jan_in",
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/intactix/in/planogram",
									"wildcardFileName": "*_planogram_jan.csv.gz",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE planogram_jan_info;\nTRUNCATE TABLE tmp_planogram_jan_info;",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shelf_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_planogram_jan_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_planogram_jan_info SET validation_cd = 2\n WHERE shelf_cd IS NULL \n    OR jan_cd IS NULL\n    OR LEN(shelf_cd) > 9\n    OR LEN(jan_cd) > 13;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "INSERT INTO planogram_jan_info (shelf_cd, jan_cd) \nSELECT shelf_cd, RIGHT('0000000000000' + jan_cd, 13)\n  FROM tmp_planogram_jan_info\n WHERE validation_cd = 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "planogram_jan_in",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": "planogram_jan_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": "planogram_jan_in",
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_planogram_jan_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_intactix_get_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_planogram_jan_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_intactix_get_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_intactix_get_shopInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": "planogram_shop_in",
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/intactix/in/planogram",
									"wildcardFileName": "*_planogram_shop.csv.gz",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE planogram_shop_info;\nTRUNCATE TABLE tmp_planogram_shop_info;",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "shelf_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_planogram_shop_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_planogram_shop_info SET validation_cd = 2\n WHERE shelf_cd IS NULL \n    OR store_cd IS NULL\n    OR LEN(shelf_cd) > 9\n    OR LEN(store_cd) > 5;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "INSERT INTO planogram_shop_info (shelf_cd, store_cd) \nSELECT shelf_cd, RIGHT('00000' + store_cd, 5)\n  FROM tmp_planogram_shop_info\n WHERE validation_cd = 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": "planogram_shop_in",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": "planogram_shop_in",
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ValidationLog",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": "planogram_shop_in",
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_planogram_shop_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_intactix_get_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_planogram_shop_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_intactix_get_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_ns_judge_mast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table ns_judge_mast;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "odbms_stock_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "odbms_brakeset_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "intac_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "tlog_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "judge_kekka",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "judge_reason",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_ns_judge_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_ns_judge_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_ns_judge_mast')]",
				"[concat(variables('factoryId'), '/datasets/snk_ns_judge_mast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_odbms_get_arrival')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/odbms/in/order",
									"wildcardFileName": {
										"value": "@concat(\n  '*_',\n  pipeline().parameters.in_target,\n  '_order.csv.gz'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE tmp_odbms_arrival_info;",
								"tableOption": "autoCreate",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "order_quantity",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "order_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "arrival_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"physicalType": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "exec_date",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_odbms_arrival_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_arrival_info SET validation_cd = 2\n WHERE store_cd IS NULL \n    OR jan_cd IS NULL\n    OR order_quantity IS NULL\n    OR arrival_date IS NULL\n    OR LEN(store_cd) > 5\n    OR LEN(dept_cd) > 3\n    OR LEN(jan_cd) > 13\n    OR LEN(order_quantity) > 7\n    OR LEN(order_date) > 8\n    OR LEN(arrival_date) > 8\n    OR LEN(exec_date) > 8;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'INSERT INTO odbms_arrival_info (',\n    '    store_cd, dept_cd, jan_cd, order_quantity,',\n    '    order_date, arrival_date, exec_date, env_id',\n    ') ',\n    ' SELECT',\n    '    RIGHT(''00000'' + store_cd, 5),',\n    '    dept_cd,',\n    '    RIGHT(''0000000000000'' + jan_cd, 13),',\n    '    order_quantity,',\n    '    order_date,',\n    '    arrival_date,',\n    '    exec_date,',\n    '    ''', pipeline().parameters.in_target, '''',\n    ' FROM tmp_odbms_arrival_info',\n    ' WHERE validation_cd = 1;',\n    ' SELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_odbms_arrival_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_odbms_get_arrival",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					},
					"in_target": {
						"type": "string",
						"defaultValue": "GM"
					},
					"in_exec_na": {
						"type": "string",
						"defaultValue": "odbms_arriv_gm_in"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_odbms_arrival_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_odbms_get_arrival')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_odbms_get_brakeset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "odbms_brakeset_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/odbms/in/breakset",
									"wildcardFileName": {
										"value": "*_breakset.csv",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE odbms_brakeset_info;\nTRUNCATE TABLE tmp_odbms_brakeset_info;\n",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "env_id",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "parent_dept_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "parent_jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "child_dept_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "child_jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "number_sets",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_csv",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_odbms_brakeset_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_brakeset_info SET validation_cd = 2\n WHERE env_id IS NULL\n    OR parent_dept_cd IS NULL\n    OR child_jan_cd IS NULL\n    OR LEN(env_id) > 4\n    OR LEN(parent_dept_cd) > 3\n    OR LEN(parent_jan_cd) > 13\n    OR LEN(child_dept_cd) > 3\n    OR LEN(child_jan_cd) > 13\n    OR ISNUMERIC(number_sets) <> 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "INSERT INTO odbms_brakeset_info (\n    env_id ,parent_dept_cd ,parent_jan_cd ,child_dept_cd ,child_jan_cd ,number_sets\n) \nSELECT\n    env_id,\n    parent_dept_cd,\n    RIGHT('0000000000000' + parent_jan_cd, 13),\n    child_dept_cd,\n    RIGHT('0000000000000' + child_jan_cd, 13),\n    CONVERT(INT, CONVERT(DECIMAL, number_sets))\n  FROM tmp_odbms_brakeset_info\n WHERE validation_cd = 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "odbms_brakeset_in",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "odbms_brakeset_in",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DupeCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "odbms_brakeset_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_odbms_brakeset_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DupeCheck",
						"description": "重複チェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_brakeset_info SET validation_cd = 3\n  FROM tmp_odbms_brakeset_info AS tmp\n WHERE tmp.seq_no IN (\n        SELECT seq_no\n          FROM (\n            SELECT seq_no, ROW_NUMBER() OVER(PARTITION BY child_jan_cd ORDER BY seq_no asc) AS row_no\n              FROM tmp_odbms_brakeset_info\n             WHERE validation_cd = 1\n        ) AS dupe\n        WHERE row_no <> 1\n);\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_odbms_get_brakeset",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_csv')]",
				"[concat(variables('factoryId'), '/datasets/tmp_odbms_brakeset_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_odbms_get_brakeset')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_odbms_get_minInfo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/odbms/in/mini",
									"wildcardFileName": {
										"value": "@concat(\n  '*_',\n  pipeline().parameters.in_target,\n  '_mini.csv.gz'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": {
									"value": "@{concat(\n    'TRUNCATE TABLE tmp_odbms_mini_info;',\n    'DELETE FROM odbms_mini_info WHERE ENV_ID = ',\n    '    ''', pipeline().parameters.in_target, ''';'\n)}",
									"type": "Expression"
								},
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "store_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "threshold_num",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_odbms_mini_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_mini_info SET validation_cd = 2\n WHERE store_cd IS NULL\n    OR jan_cd IS NULL\n    OR LEN(store_cd) > 5\n    OR LEN(jan_cd) > 13\n    OR LEN(threshold_num) > 12;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'INSERT INTO odbms_mini_info (',\n    '    store_cd, jan_cd,　threshold_num, env_id',\n    ') ',\n    ' SELECT',\n    '    RIGHT(''00000'' + store_cd, 5),',\n    '    RIGHT(''0000000000000'' + jan_cd, 13),',\n    '    threshold_num,',\n    '    ''', pipeline().parameters.in_target, '''',\n    ' FROM tmp_odbms_mini_info',\n    ' WHERE validation_cd = 1;',\n    ' SELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "DupeCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_odbms_mini_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "DupeCheck",
						"description": "重複チェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_mini_info SET validation_cd = 3\n  FROM tmp_odbms_mini_info AS tmp\n WHERE tmp.seq_no IN (\n        SELECT seq_no\n          FROM (\n            SELECT seq_no, ROW_NUMBER() OVER(PARTITION BY store_cd,jan_cd ORDER BY seq_no asc) AS row_no\n              FROM tmp_odbms_mini_info\n             WHERE validation_cd = 1\n        ) AS dupe\n        WHERE row_no <> 1\n);\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_odbms_get_minInfo",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					},
					"in_target": {
						"type": "string",
						"defaultValue": "GM"
					},
					"in_exec_na": {
						"type": "string",
						"defaultValue": "odbms_mini_gm_in"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_odbms_mini_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_odbms_get_minInfo')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_odbms_get_stock')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFolderPath": "appdata/ftpdata/eai/odbms/in/stock",
									"wildcardFileName": {
										"value": "@concat(\n  '*_',\n  pipeline().parameters.in_target,\n  '_stock.csv.gz'\n)",
										"type": "Expression"
									},
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "TRUNCATE TABLE tmp_odbms_stock_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "calc_date",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "store_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "term_stock",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "dept_cd",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_odbms_stock_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_stock_info SET validation_cd = 2\n WHERE calc_date IS NULL \n    OR store_cd IS NULL\n    OR jan_cd IS NULL\n    OR term_stock IS NULL\n    OR LEN(calc_date) > 8\n    OR LEN(store_cd) > 5\n    OR LEN(jan_cd) > 13\n    OR LEN(term_stock) > 10\n    OR LEN(dept_cd) > 3;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "@concat(\n    'INSERT INTO odbms_stock_info (',\n    '    calc_date, store_cd, jan_cd,',\n    '    term_stock, dept_cd, env_id',\n    ') ',\n    ' SELECT',\n    '    calc_date,',\n    '    RIGHT(''00000'' + store_cd, 5),',\n    '    RIGHT(''0000000000000'' + jan_cd, 13),',\n    '    term_stock,',\n    '    dept_cd,',\n    '    ''', pipeline().parameters.in_target, '''',\n    ' FROM tmp_odbms_stock_info',\n    ' WHERE validation_cd = 1;',\n    ' SELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;'\n)",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "@pipeline().parameters.in_exec_na",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ExistsCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "@pipeline().parameters.in_exec_na",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_odbms_stock_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExistsCheck",
						"description": "取込既存チェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "DupeCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_stock_info SET validation_cd = 4\n  FROM tmp_odbms_stock_info AS tmp\n INNER JOIN odbms_stock_info AS inf\n    ON inf.store_cd = RIGHT('00000' + tmp.store_cd, 5)\n   AND inf.jan_cd = RIGHT('0000000000000' + tmp.jan_cd, 13)\n WHERE tmp.validation_cd = 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "DupeCheck",
						"description": "重複チェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_odbms_stock_info SET validation_cd = 3\n  FROM tmp_odbms_stock_info AS tmp\n WHERE tmp.seq_no IN (\n        SELECT seq_no\n          FROM (\n            SELECT seq_no, store_cd, jan_cd, ROW_NUMBER() OVER(PARTITION BY store_cd,jan_cd ORDER BY seq_no asc) AS row_no\n              FROM tmp_odbms_stock_info\n             WHERE validation_cd = 1\n        ) AS dupe\n        WHERE row_no <> 1\n);\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_odbms_get_stock",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					},
					"in_target": {
						"type": "string",
						"defaultValue": "GM"
					},
					"in_exec_na": {
						"type": "string",
						"defaultValue": "odbms_stock_gm_in"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_odbms_stock_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]",
				"[concat(variables('factoryId'), '/datasets/dst_odbms_get_stock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_store_mast')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table store_mast;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "bic_company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "store_na",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "sort_jun",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "md_start_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "gm_start_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "gr_start_umu",
											"type": "String",
											"physicalType": "nvarchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_store_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_store_mast",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_store_mast')]",
				"[concat(variables('factoryId'), '/datasets/snk_store_mast')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_threshold_info')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportCsv",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:05:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings",
									"compressionProperties": {
										"type": "ZipDeflateReadSettings"
									}
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "truncate table threshold_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "company_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "store_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "store_nm",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "dept_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 5
										},
										"sink": {
											"name": "category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "sub_category_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 7
										},
										"sink": {
											"name": "threshold_name",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 8
										},
										"sink": {
											"name": "threshold_num",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 9
										},
										"sink": {
											"name": "remarks",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 10
										},
										"sink": {
											"name": "jan_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 11
										},
										"sink": {
											"name": "threshold_cd",
											"type": "String",
											"physicalType": "nvarchar"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 12
										},
										"sink": {
											"name": "min_coeffecient",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "src_threshold_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "snk_threshold_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/src_threshold_info')]",
				"[concat(variables('factoryId'), '/datasets/snk_threshold_info')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_tlog_get_info')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "eai_tlog_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveWorkFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"additionalColumns": [
									{
										"name": "file_path",
										"value": "$$FILEPATH"
									}
								],
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "appdata/ftpdata/eai/in/sales/wk",
									"wildcardFileName": "*_sales.csv.gz",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM eai_shop_sale_info WHERE selling_date < CONVERT(NVARCHAR, DATEADD(MONTH, -1, GETDATE()), 112);\nTRUNCATE TABLE tmp_eai_shop_sale_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "dept_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "selling_date",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "selling_cnt",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_eai_shop_sale_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_eai_shop_sale_info SET validation_cd = 2\n WHERE shop_cd IS NULL\n    OR jan_cd IS NULL\n    OR selling_date IS NULL\n    OR LEN(shop_cd) <> 10\n    OR LEN(selling_date) <> 8\n    OR LEN(jan_cd) > 13\n    OR LEN(dept_cd) > 3\n    OR ISNUMERIC(selling_cnt) <> 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "MERGE eai_shop_sale_info AS target\nUSING (\n    SELECT shop_cd, jan_cd, selling_date,\n           MIN(dept_cd) AS dept_cd,\n           SUM( CONVERT(INT, CONVERT(DECIMAL, selling_cnt))) AS selling_cnt\n      FROM tmp_eai_shop_sale_info\n     WHERE validation_cd = 1\n     GROUP BY shop_cd, jan_cd, selling_date\n) AS source ON (\n        target.shop_cd      = source.shop_cd\n    AND target.jan_cd       = RIGHT('0000000000000' + source.jan_cd, 13)\n    AND target.selling_date = source.selling_date\n)\nWHEN MATCHED THEN\n    UPDATE SET selling_cnt = target.selling_cnt + source.selling_cnt\nWHEN NOT MATCHED THEN\n    INSERT (shop_cd, dept_cd, jan_cd, selling_date, selling_cnt, store_cd)\n    VALUES (\n        source.shop_cd,\n        source.dept_cd,\n        RIGHT('0000000000000' + source.jan_cd, 13),\n        source.selling_date,\n        CONVERT(INT, CONVERT(DECIMAL, source.selling_cnt)),\n        SUBSTRING (source.shop_cd, 5, 5)\n    );\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "eai_tlog_in",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "eai_tlog_in",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "eai_tlog_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_eai_shop_sale_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MoveWorkFolder",
						"description": "作業用フォルダへ移動",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_tlog_get_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_wk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MoveBackFolder",
						"description": "バックアップフォルダへ移動",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_tlog_get_info_wk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_bk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_wk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_eai_shop_sale_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info_wk')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info_bk')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/pip_tlog_get_info_copy1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "ImportError1",
						"description": "取込異常終了",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Failed"
								]
							}
						],
						"policy": {
							"timeout": "00:01:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
							"storedProcedureParameters": {
								"vc_error_mode": {
									"value": {
										"value": "@pipeline().parameters.in_error_mode",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_exec_na": {
									"value": {
										"value": "eai_tlog_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_log_text": {
									"value": "CSVファイルが存在しません。",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ImportCsv",
						"description": "CSVファイルをインポート",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "MoveWorkFolder",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CopyDummy",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"wildcardFolderPath": "appdata/ftpdata/eai/in/sales/wk",
									"wildcardFileName": "*_sales.csv.gz",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "AzureSqlSink",
								"preCopyScript": "DELETE FROM eai_shop_sale_info WHERE selling_date < CONVERT(NVARCHAR, DATEADD(MONTH, -1, GETDATE()), 112);\nTRUNCATE TABLE tmp_eai_shop_sale_info;",
								"disableMetricsCollection": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "file_path",
											"type": "String"
										},
										"sink": {
											"name": "file_path",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 1
										},
										"sink": {
											"name": "shop_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 3
										},
										"sink": {
											"name": "dept_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 4
										},
										"sink": {
											"name": "jan_cd",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 2
										},
										"sink": {
											"name": "selling_date",
											"type": "String"
										}
									},
									{
										"source": {
											"type": "String",
											"ordinal": 6
										},
										"sink": {
											"name": "selling_cnt",
											"type": "String"
										}
									}
								]
							}
						},
						"inputs": [
							{
								"referenceName": "src_blob_pattern_gz",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "tmp_eai_shop_sale_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "ValidationCheck",
						"description": "バリデーションチェック",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "UPDATE tmp_eai_shop_sale_info SET validation_cd = 2\n WHERE shop_cd IS NULL\n    OR jan_cd IS NULL\n    OR selling_date IS NULL\n    OR LEN(shop_cd) <> 10\n    OR LEN(selling_date) <> 8\n    OR LEN(jan_cd) > 13\n    OR LEN(dept_cd) > 3\n    OR ISNUMERIC(selling_cnt) <> 1;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "ImportTmp",
						"description": "一時テーブルをインポート",
						"type": "Lookup",
						"dependsOn": [
							{
								"activity": "ValidationLog",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "1:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "MERGE eai_shop_sale_info AS target\nUSING (\n    SELECT shop_cd, jan_cd, selling_date,\n           MIN(dept_cd) AS dept_cd,\n           SUM( CONVERT(INT, CONVERT(DECIMAL, selling_cnt))) AS selling_cnt\n      FROM tmp_eai_shop_sale_info\n     WHERE validation_cd = 1\n     GROUP BY shop_cd, jan_cd, selling_date\n) AS source ON (\n        target.shop_cd      = source.shop_cd\n    AND target.jan_cd       = source.jan_cd\n    AND target.selling_date = source.selling_date\n)\nWHEN MATCHED THEN\n    UPDATE SET selling_cnt = target.selling_cnt + source.selling_cnt\nWHEN NOT MATCHED THEN\n    INSERT (shop_cd, dept_cd, jan_cd, selling_date, selling_cnt, store_cd)\n    VALUES (\n        source.shop_cd,\n        source.dept_cd,\n        RIGHT('0000000000000' + source.jan_cd, 13),\n        source.selling_date,\n        CONVERT(INT, CONVERT(DECIMAL, source.selling_cnt)),\n        SUBSTRING (source.shop_cd, 5, 5)\n    );\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "dst_sql_none",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					},
					{
						"name": "SetRowsRead",
						"description": "読込行数取得",
						"type": "SetVariable",
						"dependsOn": [
							{
								"activity": "ImportCsv",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"variableName": "rowsRead",
							"value": {
								"value": "@concat(activity('ImportCsv').output. rowsRead)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "IfRowsRead",
						"description": "CSV読込行数により分岐",
						"type": "IfCondition",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"expression": {
								"value": "@equals(variables('rowsRead'),'0')\n\n",
								"type": "Expression"
							},
							"ifFalseActivities": [
								{
									"name": "Complete",
									"description": "正常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_normal_exec_rslt_info]",
										"storedProcedureParameters": {
											"vc_exec_na": {
												"value": {
													"value": "eai_tlog_in",
													"type": "Expression"
												},
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							],
							"ifTrueActivities": [
								{
									"name": "ImportError2",
									"description": "取込異常終了",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [],
									"policy": {
										"timeout": "00:01:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[marge_error_exec_rslt_info_adf]",
										"storedProcedureParameters": {
											"vc_error_mode": {
												"value": {
													"value": "@pipeline().parameters.in_error_mode",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_exec_na": {
												"value": {
													"value": "eai_tlog_in",
													"type": "Expression"
												},
												"type": "String"
											},
											"vc_log_text": {
												"value": "CSVファイルが空か、存在しません。",
												"type": "String"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "lnk_stock_sql",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					},
					{
						"name": "ValidationLog",
						"description": "バリデーションログ",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "ValidationCheck",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "01:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[insert_validation_log]",
							"storedProcedureParameters": {
								"vc_exec_na": {
									"value": {
										"value": "eai_tlog_in",
										"type": "Expression"
									},
									"type": "String"
								},
								"vc_tmp_table": {
									"value": "tmp_eai_shop_sale_info",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "lnk_stock_sql",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "MoveWorkFolder",
						"description": "作業用フォルダへ移動",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_tlog_get_info",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_wk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "MoveBackFolder",
						"description": "バックアップフォルダへ移動",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "ImportTmp",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_tlog_get_info_wk",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_bk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "CopyDummy",
						"description": "フォルダ無しエラー回避のためダミーファイルをコピー",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "00:10:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": false,
									"deleteFilesAfterCompletion": false
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "dst_blob_dummy",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "dst_tlog_get_info_bk",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"parameters": {
					"in_error_mode": {
						"type": "string",
						"defaultValue": "2"
					}
				},
				"variables": {
					"rowsRead": {
						"type": "String"
					}
				},
				"folder": {
					"name": "stock"
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]",
				"[concat(variables('factoryId'), '/datasets/src_blob_pattern_gz')]",
				"[concat(variables('factoryId'), '/datasets/tmp_eai_shop_sale_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_sql_none')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info_wk')]",
				"[concat(variables('factoryId'), '/datasets/dst_tlog_get_info_bk')]",
				"[concat(variables('factoryId'), '/datasets/dst_blob_dummy')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sum_order_flow_pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "sum_order_flow",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "sum_order_flow",
								"type": "DataFlowReference",
								"parameters": {
									"shop_cd": {
										"value": "'@{pipeline().parameters.shop_cd}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Order": {},
									"Odtail": {},
									"Goods": {},
									"SinkOrder": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "test01-runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"parameters": {
					"shop_cd": {
						"type": "string"
					}
				},
				"folder": {
					"name": "23_Calc"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-18T04:25:44Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/sum_order_flow')]",
				"[concat(variables('factoryId'), '/integrationRuntimes/test01-runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sum_order_sql')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "calc_sum",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "UPDATE zz_order\t\nSET\t\n    zz_order.total = zz_order_sum.total,\t\n    zz_order.updt = CURRENT_TIMESTAMP \t\nFROM zz_order\t\nINNER JOIN (\t\n\tselect o1.order_id as order_id, sum (o2.qty * gs.price) as total\n\t from zz_order o1\n\t left join zz_odetail o2 on o2.order_id  = o1.order_id \n\t left join zz_goods gs on gs.goods_cd = o2.goods_cd \n\twhere o1.shop_cd = '@{pipeline().parameters.shop_cd}'\n\t group by o1.order_id\n) AS zz_order_sum\t\nON zz_order_sum.order_id = zz_order.order_id;\nSELECT @@ROWCOUNT as count, CURRENT_TIMESTAMP as updt_dt;",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "01_TSQL_None",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "01_TSQL_Out",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"parameters": {
					"shop_cd": {
						"type": "string"
					}
				},
				"folder": {
					"name": "23_Calc"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-13T12:56:45Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/01_TSQL_None')]",
				"[concat(variables('factoryId'), '/datasets/01_TSQL_Out')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sum_order_stord')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Stored procedure1",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [],
						"policy": {
							"timeout": "00:00:30",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[zz_sum_order]",
							"storedProcedureParameters": {
								"in_shop_cd": {
									"value": {
										"value": "@{pipeline().parameters.shop_cd}",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "test01_link_sql",
							"type": "LinkedServiceReference"
						}
					}
				],
				"parameters": {
					"shop_cd": {
						"type": "string"
					}
				},
				"folder": {
					"name": "23_Calc"
				},
				"annotations": [],
				"lastPublishTime": "2021-01-20T08:54:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_blob_pipe')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "MoveData",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "BinarySource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"deleteFilesAfterCompletion": true
								},
								"formatSettings": {
									"type": "BinaryReadSettings"
								}
							},
							"sink": {
								"type": "BinarySink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "test01_blob_dataset_from",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "test01_blob_dataset_to",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"concurrency": 1,
				"annotations": [],
				"lastPublishTime": "2021-01-06T01:40:39Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/test01_blob_dataset_from')]",
				"[concat(variables('factoryId'), '/datasets/test01_blob_dataset_to')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_Binary')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "01_TSQL_Binary.log",
						"folderPath": "01_TSQL",
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_None')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/01_TSQL_Out')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "01_TSQL"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "01_TSQL_Out.csv",
						"folderPath": "01_TSQL",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_in')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "11_B2D_simple"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_yoshioka_import.csv",
						"folderPath": "11_B2D_simple",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_in_zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "11_B2D_simple"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_yoshioka_import.zip",
						"folderPath": "11_B2D_simple",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_in_zip_dir')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "11_B2D_simple"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_dir.zip",
						"folderPath": "11_B2D_simple",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/11_out')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "11_B2D_simple"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "ID",
						"type": "int",
						"precision": 10
					},
					{
						"name": "FirstName",
						"type": "varchar"
					},
					{
						"name": "LastName",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_yoshioka"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_in_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "12_F2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "zz_yoshioka_import.csv"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_in_dir')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "12_F2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "zz_dir.zip"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/12_in_zip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_files",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "12_F2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureFileStorageLocation",
						"fileName": "zz_yoshioka_import.zip"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_files')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/daily_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@concat ('31_BlobLote/daily/', formatDateTime (convertTimeZone (utcNow (), 'UTC', 'Tokyo Standard Time'), 'yyyyMMdd_HHmmss'))",
							"type": "Expression"
						},
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_blob_dummy')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dummy.txt",
						"folderPath": "appdata/template",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_blob_result')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "result.txt",
						"folderPath": "work",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_intactix_get_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/intactix/in/planogram",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_odbms_get_arrival')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/odbms/in/order",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_odbms_get_brakeset')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/odbms/in/breakset",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_odbms_get_minInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/odbms/in/mini",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_odbms_get_stock')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/odbms/in/stock",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_sql_none')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_tlog_get_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/in/sales",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_tlog_get_info_bk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/in/sales/bk",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/dst_tlog_get_info_wk')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "appdata/ftpdata/eai/in/sales/wk",
						"container": "vstockpoc"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_goods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_goods.zip",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_odtail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_odtail.zip",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_order.zip",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_order_unzip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_order.csv",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_shop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_shop.zip",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					},
					{
						"type": "String"
					},
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/in_zz_stock_work')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "zz_stock_work.zip",
						"folderPath": "21_B2D",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": [
					{
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_goods')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "goods_cd",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "price",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rgdt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_goods"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_odtail')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "odetail_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "order_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "goods_cd",
						"type": "varchar"
					},
					{
						"name": "qty",
						"type": "int",
						"precision": 10
					},
					{
						"name": "rgdt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_odetail"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_order')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "total",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "rgdt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_order"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_order_tmp')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "22_BmD"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "order_id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "total",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "rgdt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_order_tmp"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_shop')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "21_B2D"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "name",
						"type": "varchar"
					},
					{
						"name": "rgdt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updt",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_shop"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/ot_zz_stock_work')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_sql",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "shop_cd",
						"type": "varchar"
					},
					{
						"name": "jan_cd",
						"type": "varchar"
					},
					{
						"name": "book_qty",
						"type": "decimal",
						"precision": 12,
						"scale": 4
					},
					{
						"name": "stock_qty",
						"type": "decimal",
						"precision": 12,
						"scale": 4
					},
					{
						"name": "flg",
						"type": "int",
						"precision": 10
					},
					{
						"name": "planogram_flg",
						"type": "int",
						"precision": 10
					},
					{
						"name": "sales_flg",
						"type": "int",
						"precision": 10
					},
					{
						"name": "data_date",
						"type": "nvarchar"
					},
					{
						"name": "created_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					},
					{
						"name": "updated_at",
						"type": "datetime",
						"precision": 23,
						"scale": 3
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "zz_stock_work"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sample_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "31_BlobLote/sample",
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_company_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "bic_company_cd",
						"type": "nvarchar"
					},
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "company_na",
						"type": "nvarchar"
					},
					{
						"name": "sort_jun",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "company_mast"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_contain_store_dept_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "retail_store_cd",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "nvarchar"
					},
					{
						"name": "category_cd",
						"type": "nvarchar"
					},
					{
						"name": "sub_category_cd",
						"type": "nvarchar"
					},
					{
						"name": "link_pattern",
						"type": "nvarchar"
					},
					{
						"name": "containing_store_cd",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "contain_store_dept_mast"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_dept_term')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "varchar"
					},
					{
						"name": "judge_term",
						"type": "int",
						"precision": 10
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "dept_term"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_ecbeing_goods_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "shop_cd",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "nvarchar"
					},
					{
						"name": "category_cd",
						"type": "nvarchar"
					},
					{
						"name": "sub_category_cd",
						"type": "nvarchar"
					},
					{
						"name": "jan_cd",
						"type": "nvarchar"
					},
					{
						"name": "sales_promotion_cd",
						"type": "nchar"
					},
					{
						"name": "disp_status_cd",
						"type": "nchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ecbeing_goods_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_exclude_goods_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_nm",
						"type": "nvarchar"
					},
					{
						"name": "jan_cd",
						"type": "nvarchar"
					},
					{
						"name": "godds_name",
						"type": "nvarchar"
					},
					{
						"name": "remarks",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "nvarchar"
					},
					{
						"name": "category_cd",
						"type": "nvarchar"
					},
					{
						"name": "sub_category_cd",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "exclude_goods_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_intac_judge_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "dept_group_cd",
						"type": "nvarchar"
					},
					{
						"name": "dept_group_na",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "nvarchar"
					},
					{
						"name": "dept_na",
						"type": "nvarchar"
					},
					{
						"name": "category_cd",
						"type": "nvarchar"
					},
					{
						"name": "sub_category_cd",
						"type": "nvarchar"
					},
					{
						"name": "env_id",
						"type": "nvarchar"
					},
					{
						"name": "disp_logic",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "intac_judge_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_intactix_get_janInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "odbms_stock_umu",
						"type": "nvarchar"
					},
					{
						"name": "odbms_brakeset_umu",
						"type": "nvarchar"
					},
					{
						"name": "intac_umu",
						"type": "nvarchar"
					},
					{
						"name": "tlog_umu",
						"type": "nvarchar"
					},
					{
						"name": "judge_kekka",
						"type": "nvarchar"
					},
					{
						"name": "judge_reason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "planogram_jan_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_intactix_get_shopInfo')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "odbms_stock_umu",
						"type": "nvarchar"
					},
					{
						"name": "odbms_brakeset_umu",
						"type": "nvarchar"
					},
					{
						"name": "intac_umu",
						"type": "nvarchar"
					},
					{
						"name": "tlog_umu",
						"type": "nvarchar"
					},
					{
						"name": "judge_kekka",
						"type": "nvarchar"
					},
					{
						"name": "judge_reason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "planogram_shop_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_ns_judge_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "odbms_stock_umu",
						"type": "nvarchar"
					},
					{
						"name": "odbms_brakeset_umu",
						"type": "nvarchar"
					},
					{
						"name": "intac_umu",
						"type": "nvarchar"
					},
					{
						"name": "tlog_umu",
						"type": "nvarchar"
					},
					{
						"name": "judge_kekka",
						"type": "nvarchar"
					},
					{
						"name": "judge_reason",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "ns_judge_mast"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_store_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "bic_company_cd",
						"type": "nvarchar"
					},
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_na",
						"type": "nvarchar"
					},
					{
						"name": "sort_jun",
						"type": "nvarchar"
					},
					{
						"name": "md_start_umu",
						"type": "nvarchar"
					},
					{
						"name": "gm_start_umu",
						"type": "nvarchar"
					},
					{
						"name": "gr_start_umu",
						"type": "nvarchar"
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "store_mast"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/snk_threshold_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "company_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_cd",
						"type": "nvarchar"
					},
					{
						"name": "store_nm",
						"type": "nvarchar"
					},
					{
						"name": "dept_cd",
						"type": "nvarchar"
					},
					{
						"name": "category_cd",
						"type": "nvarchar"
					},
					{
						"name": "sub_category_cd",
						"type": "nvarchar"
					},
					{
						"name": "threshold_name",
						"type": "nvarchar"
					},
					{
						"name": "threshold_num",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "remarks",
						"type": "nvarchar"
					},
					{
						"name": "jan_cd",
						"type": "nvarchar"
					},
					{
						"name": "threshold_cd",
						"type": "nvarchar"
					},
					{
						"name": "min_coeffecient",
						"type": "real",
						"precision": 7
					}
				],
				"typeProperties": {
					"schema": "dbo",
					"table": "threshold_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_blob_pattern_csv')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_blob_pattern_gz')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "gzip",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_company_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "company_mast.zip",
						"folderPath": "stock/in",
						"container": "test01-private"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_contain_store_dept_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "contain_store_dept_mast.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_dept_term')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "dept_term.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ecbeing_create_target_list')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ecbeing_goods.zip",
						"folderPath": "appdata/ftpdata/ecbeing/in/goods",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ecbeing_create_target_list_unzip')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ecbeing_goods.csv",
						"folderPath": "appdata/ftpdata/ecbeing/in/goods",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_exclude_goods_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "exclude_goods_info.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_intac_judge_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "intac_judge_info.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_ns_judge_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ns_judge_mast.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_store_mast')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "store_mast.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/src_threshold_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "threshold_info.zip",
						"folderPath": "input",
						"container": "vstockpoc"
					},
					"columnDelimiter": ",",
					"compressionCodec": "ZipDeflate",
					"escapeChar": "\\",
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_blob_dataset_from')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ranking_copy.txt",
						"folderPath": "text",
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_blob_dataset_to')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "ranking_copy2.txt",
						"folderPath": "text",
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_eai_shop_sale_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_eai_shop_sale_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_odbms_arrival_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_odbms_arrival_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_odbms_brakeset_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_odbms_brakeset_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_odbms_mini_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_odbms_mini_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_odbms_stock_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_odbms_stock_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_planogram_jan_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_planogram_jan_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/tmp_planogram_shop_info')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "lnk_stock_sql",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "stock"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [],
				"typeProperties": {
					"schema": "dbo",
					"table": "tmp_planogram_shop_info"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/lnk_stock_sql')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/upload_folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "31_BlobLote"
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": "31_BlobLote/upload",
						"container": "test01-private"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_stock_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"serviceEndpoint": "[parameters('lnk_stock_blob_properties_typeProperties_serviceEndpoint')]",
					"accountKind": "StorageV2"
				},
				"connectVia": {
					"referenceName": "run-stock",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/run-stock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/lnk_stock_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('lnk_stock_sql_connectionString')]"
				},
				"connectVia": {
					"referenceName": "run-stock",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/run-stock')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_link_blob')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('test01_link_blob_connectionString')]"
				},
				"connectVia": {
					"referenceName": "test01-runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/test01-runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_link_files')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureFileStorage",
				"typeProperties": {
					"connectionString": "[parameters('test01_link_files_connectionString')]",
					"fileShare": "vstockpoc"
				},
				"connectVia": {
					"referenceName": "test01-runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/integrationRuntimes/test01-runtime')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01_link_sql')]",
			"type": "Microsoft.DataFactory/factories/linkedServices",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('test01_link_sql_connectionString')]"
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_B2D_BlobTrigger')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "11_B2D_BlobTrigger",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/test01-private/blobs/11_B2D_simple/zz_yoshioka_import.csv",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('trg_B2D_BlobTrigger_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/11_B2D_BlobTrigger')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_ecbeing_create_target_list_1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "pip_ecbeing_create_target_list_1",
							"type": "PipelineReference"
						},
						"parameters": {
							"in_error_mode": "[parameters('trg_ecbeing_create_target_list_1_properties_pip_ecbeing_create_target_list_1_parameters_in_error_mode')]"
						}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-02-25T06:00:00",
						"endTime": "2021-02-26T06:00:00",
						"timeZone": "Tokyo Standard Time",
						"schedule": {
							"minutes": [
								0
							],
							"hours": [
								6,
								7
							]
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/pip_ecbeing_create_target_list_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_lote_move_dialy')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "日別フォルダへ移動",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "lote_move_daily",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-20T17:26:00",
						"endTime": "2021-02-01T06:25:00",
						"timeZone": "Tokyo Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/lote_move_daily')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_lote_upload')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "move daily",
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "lote_upload",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2021-01-19T14:55:00",
						"endTime": "2021-02-05T04:54:00",
						"timeZone": "Tokyo Standard Time"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/lote_upload')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trg_lote_upload_min')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "３分ごとに実行",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "lote_upload",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Minute",
						"interval": 3,
						"startTime": "2021-01-19T05:17:00Z",
						"endTime": "2021-01-19T05:59:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/lote_upload')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/run-stock')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Japan East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0,
							"cleanup": true
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/test01-runtime')]",
			"type": "Microsoft.DataFactory/factories/integrationRuntimes",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "Japan East",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/mfl_zz_order')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "22_BmD"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "in_zz_order_unzip",
								"type": "DatasetReference"
							},
							"name": "source1"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ot_zz_order",
								"type": "DatasetReference"
							},
							"name": "sink1"
						}
					],
					"transformations": [
						{
							"name": "alter1"
						}
					],
					"script": "source(output(\n\t\tColumn_1 as string,\n\t\tColumn_2 as string\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tignoreNoFilesFound: false) ~> source1\nsource1 alterRow(upsertIf(true())) ~> alter1\nalter1 sink(input(\n\t\torder_id as long,\n\t\tshop_cd as string,\n\t\ttotal as long,\n\t\trgdt as timestamp,\n\t\tupdt as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:true,\n\tupdateable:false,\n\tupsertable:true,\n\tkeys:['order_id'],\n\tformat: 'table',\n\tmapColumn(\n\t\torder_id = Column_1,\n\t\tshop_cd = Column_2\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> sink1"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/in_zz_order_unzip')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_order')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/sum_order_flow')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"folder": {
					"name": "23_Calc"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ot_zz_order",
								"type": "DatasetReference"
							},
							"name": "Order"
						},
						{
							"dataset": {
								"referenceName": "ot_zz_odtail",
								"type": "DatasetReference"
							},
							"name": "Odtail"
						},
						{
							"dataset": {
								"referenceName": "ot_zz_goods",
								"type": "DatasetReference"
							},
							"name": "Goods"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ot_zz_order",
								"type": "DatasetReference"
							},
							"name": "SinkOrder"
						}
					],
					"transformations": [
						{
							"name": "SumOdtail"
						},
						{
							"name": "JoinGoods"
						},
						{
							"name": "FilterOrder"
						},
						{
							"name": "JoinSumOdtail"
						},
						{
							"name": "AlterRowOrder"
						}
					],
					"script": "parameters{\n\tshop_cd as string\n}\nsource(output(\n\t\torder_id as long,\n\t\tshop_cd as string,\n\t\ttotal as long,\n\t\trgdt as timestamp,\n\t\tupdt as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Order\nsource(output(\n\t\todetail_id as long,\n\t\torder_id as long,\n\t\tshop_cd as string,\n\t\tgoods_cd as string,\n\t\tqty as integer,\n\t\trgdt as timestamp,\n\t\tupdt as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Odtail\nsource(output(\n\t\tshop_cd as string,\n\t\tgoods_cd as string,\n\t\tname as string,\n\t\tprice as integer,\n\t\trgdt as timestamp,\n\t\tupdt as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tisolationLevel: 'READ_UNCOMMITTED',\n\tformat: 'table') ~> Goods\nJoinGoods aggregate(groupBy(order_id),\n\ttotal = sum(qty*price)) ~> SumOdtail\nOdtail, Goods join(Odtail@goods_cd == Goods@goods_cd,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinGoods\nOrder filter(shop_cd == $shop_cd) ~> FilterOrder\nFilterOrder, SumOdtail join(Order@order_id == SumOdtail@order_id,\n\tjoinType:'left',\n\tbroadcast: 'auto')~> JoinSumOdtail\nJoinSumOdtail alterRow(updateIf(true())) ~> AlterRowOrder\nAlterRowOrder sink(input(\n\t\torder_id as long,\n\t\tshop_cd as string,\n\t\ttotal as long,\n\t\trgdt as timestamp,\n\t\tupdt as timestamp\n\t),\n\tallowSchemaDrift: true,\n\tvalidateSchema: false,\n\tdeletable:false,\n\tinsertable:false,\n\tupdateable:true,\n\tupsertable:false,\n\tkeys:['order_id'],\n\tformat: 'table',\n\tmapColumn(\n\t\torder_id = SumOdtail@order_id,\n\t\ttotal = SumOdtail@total\n\t),\n\tskipDuplicateMapInputs: true,\n\tskipDuplicateMapOutputs: true,\n\terrorHandlingOption: 'stopOnFirstError') ~> SinkOrder"
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/ot_zz_order')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_odtail')]",
				"[concat(variables('factoryId'), '/datasets/ot_zz_goods')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySourceFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your source data store.",
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/BinarySinkFileStore')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Connection to your destination data store.",
				"linkedServiceName": {
					"referenceName": "test01_link_blob",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"container": {
						"type": "string"
					},
					"directory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "Binary",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"folderPath": {
							"value": "@dataset().directory",
							"type": "Expression"
						},
						"container": {
							"value": "@dataset().container",
							"type": "Expression"
						}
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/linkedServices/test01_link_blob')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/CopyFilesfromMultipleContainers')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Scan the file path on your source storage store and get the container list.",
				"activities": [
					{
						"name": "EnumerateContainersList",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "7.00:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "BinarySourceFileStore",
								"type": "DatasetReference",
								"parameters": {
									"container": {
										"value": "@pipeline().parameters.SourceFileFolder",
										"type": "Expression"
									},
									"directory": {
										"value": "@pipeline().parameters.SourceFileDirectory",
										"type": "Expression"
									}
								}
							},
							"fieldList": [
								"childItems"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true
							},
							"formatSettings": {
								"type": "BinaryReadSettings"
							}
						}
					},
					{
						"name": "ForEachContainer",
						"description": "Get the container list from Metadata activity and then iterates each of them to Copy activity.",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "EnumerateContainersList",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('EnumerateContainersList').output.childItems",
								"type": "Expression"
							},
							"batchCount": 4,
							"activities": [
								{
									"name": "CopyOneContainer",
									"description": "Copy each container from source storage store to destination store.",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "7.00:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "BinarySource",
											"storeSettings": {
												"type": "AzureBlobStorageReadSettings",
												"recursive": true
											}
										},
										"sink": {
											"type": "BinarySink",
											"storeSettings": {
												"type": "AzureBlobStorageWriteSettings",
												"copyBehavior": "PreserveHierarchy"
											}
										},
										"enableStaging": false
									},
									"inputs": [
										{
											"referenceName": "BinarySourceFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.SourceFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.SourceFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "BinarySinkFileStore",
											"type": "DatasetReference",
											"parameters": {
												"container": {
													"value": "@pipeline().parameters.DestinationFileFolder",
													"type": "Expression"
												},
												"directory": {
													"value": "@concat(pipeline().parameters.DestinationFileDirectory,'/',item().name)",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"parameters": {
					"SourceFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"SourceFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileFolder": {
						"type": "string",
						"defaultValue": "/"
					},
					"DestinationFileDirectory": {
						"type": "string",
						"defaultValue": "/"
					}
				},
				"annotations": []
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/datasets/BinarySourceFileStore')]",
				"[concat(variables('factoryId'), '/datasets/BinarySinkFileStore')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/trigger1')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "CopyFilesfromMultipleContainers",
							"type": "PipelineReference"
						},
						"parameters": {
							"SourceFileFolder": "[parameters('trigger1_properties_CopyFilesfromMultipleContainers_parameters_SourceFileFolder')]",
							"SourceFileDirectory": "[parameters('trigger1_properties_CopyFilesfromMultipleContainers_parameters_SourceFileDirectory')]",
							"DestinationFileFolder": "[parameters('trigger1_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileFolder')]",
							"DestinationFileDirectory": "[parameters('trigger1_properties_CopyFilesfromMultipleContainers_parameters_DestinationFileDirectory')]"
						}
					}
				],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/test01-private/blobs/hoge",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('trigger1_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/CopyFilesfromMultipleContainers')]"
			]
		}
	]
}